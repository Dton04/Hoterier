import React, { useState, useEffect } from "react";
import axios from "axios";
import { Rate, Input, Select, Button, Alert, Spin, Divider } from "antd";

const { Option } = Select;
const { TextArea } = Input;

const RatingForm = ({ hotels, onSubmit, onCancel }) => {
  const [formData, setFormData] = useState({
    userName: "",
    userEmail: "",
    rating: 0,
    comment: "",
    criteriaRatings: {
      cleanliness: 0,
      comfort: 0,
      staff: 0,
      location: 0,
      facilities: 0,
      value: 0,
    },
  });

  const [selectedHotel, setSelectedHotel] = useState(null);
  const [selectedRoom, setSelectedRoom] = useState(null);
  const [rooms, setRooms] = useState([]);
  const [ratingError, setRatingError] = useState(null);
  const [formLoading, setFormLoading] = useState(false);

  /** üè® Khi ch·ªçn kh√°ch s·∫°n -> l·∫•y danh s√°ch ph√≤ng */
  useEffect(() => {
    if (selectedHotel) {
      const fetchRooms = async () => {
        try {
          setFormLoading(true);
          const res = await axios.get(`/api/hotels/${selectedHotel}/rooms`);
          const roomsData = res.data.rooms || res.data || [];
          setRooms(Array.isArray(roomsData) ? roomsData : []);
        } catch (err) {
          console.error("L·ªói khi l·∫•y ph√≤ng:", err);
          setRatingError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph√≤ng. Vui l√≤ng th·ª≠ l·∫°i!");
          setRooms([]);
        } finally {
          setFormLoading(false);
        }
      };
      fetchRooms();
    } else {
      setRooms([]);
      setSelectedRoom(null);
    }
  }, [selectedHotel]);

  /** ‚úèÔ∏è Nh·∫≠p text */
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  /** ‚≠ê ƒê√°nh gi√° t·ªïng th·ªÉ */
  const handleRatingChange = (value) => {
    setFormData({ ...formData, rating: value });
  };

  /** üî¢ ƒê√°nh gi√° t·ª´ng ti√™u ch√≠ */
  const handleCriteriaChange = (key, value) => {
    setFormData((prev) => ({
      ...prev,
      criteriaRatings: { ...prev.criteriaRatings, [key]: value },
    }));
  };

  /** üßæ G·ª≠i ƒë√°nh gi√° */
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      setFormLoading(true);
      setRatingError(null);

      if (!selectedHotel) return setRatingError("Vui l√≤ng ch·ªçn kh√°ch s·∫°n!");
      if (!formData.userEmail)
        return setRatingError("Vui l√≤ng nh·∫≠p email ƒë√£ d√πng ƒë·ªÉ ƒë·∫∑t ph√≤ng!");
      if (!formData.comment.trim())
        return setRatingError("Vui l√≤ng nh·∫≠p b√¨nh lu·∫≠n!");

      const ratingValue = parseInt(formData.rating, 10);
      if (isNaN(ratingValue) || ratingValue < 1 || ratingValue > 5)
        return setRatingError("ƒêi·ªÉm t·ªïng th·ªÉ ph·∫£i t·ª´ 1 ƒë·∫øn 5!");

      // ‚úÖ Ki·ªÉm tra booking t·ªìn t·∫°i & thanh to√°n th√†nh c√¥ng
      const check = await axios.get(`/api/bookings/check`, {
        params: {
          email: formData.userEmail.toLowerCase(),
          roomId: selectedRoom || undefined,
        },
      });

      if (
        !check.data.hasBooked ||
        check.data.paymentStatus !== "paid" ||
        check.data.booking.status !== "confirmed"
      ) {
        setRatingError(
          "B·∫°n c·∫ßn c√≥ ƒë·∫∑t ph√≤ng ƒë√£ thanh to√°n th√†nh c√¥ng ƒë·ªÉ g·ª≠i ƒë√°nh gi√°."
        );
        return;
      }

      // ‚úÖ G·ª≠i d·ªØ li·ªáu BE
      const reviewData = {
        hotelId: selectedHotel,
        roomId: selectedRoom || null,
        userName: formData.userName || "·∫®n danh",
        rating: ratingValue,
        comment: formData.comment,
        email: formData.userEmail.toLowerCase(),
        criteriaRatings: formData.criteriaRatings, // üÜï g·ª≠i 6 ti√™u ch√≠
      };

      console.log("üü¶ G·ª≠i d·ªØ li·ªáu ƒë√°nh gi√°:", reviewData);
      await onSubmit(reviewData);
    } catch (err) {
      console.error("L·ªói khi g·ª≠i ƒë√°nh gi√°:", err);
      setRatingError(
        err.response?.data?.message || "C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë√°nh gi√°."
      );
    } finally {
      setFormLoading(false);
    }
  };

  return (
    <div className="rating-form bg-white p-5 rounded-lg shadow-md border">
      <h3 className="text-lg font-semibold mb-4 text-[#003580]">
        G·ª≠i ƒë√°nh gi√° c·ªßa b·∫°n
      </h3>

      {ratingError && (
        <Alert
          message={ratingError}
          type="error"
          showIcon
          className="mb-4"
        />
      )}

      <form onSubmit={handleSubmit}>
        {/* Ch·ªçn kh√°ch s·∫°n */}
        <div className="form-group mb-3">
          <label>Kh√°ch s·∫°n:</label>
          <Select
            placeholder="Ch·ªçn kh√°ch s·∫°n"
            value={selectedHotel}
            onChange={(v) => setSelectedHotel(v)}
            style={{ width: "100%" }}
          >
            {hotels.map((hotel) => (
              <Option key={hotel._id} value={hotel._id}>
                {hotel.name}
              </Option>
            ))}
          </Select>
        </div>

        {/* Ch·ªçn ph√≤ng */}
        <div className="form-group mb-3">
          <label>Ph√≤ng (t√πy ch·ªçn):</label>
          <Select
            placeholder="Ch·ªçn ph√≤ng"
            value={selectedRoom}
            onChange={(v) => setSelectedRoom(v)}
            style={{ width: "100%" }}
            disabled={!selectedHotel || formLoading}
            notFoundContent={
              formLoading ? <Spin size="small" /> : "Kh√¥ng c√≥ ph√≤ng n√†o"
            }
          >
            {rooms.map((room) => (
              <Option key={room._id} value={room._id}>
                {room.name} ({room.type})
              </Option>
            ))}
          </Select>
        </div>

        {/* Th√¥ng tin ng∆∞·ªùi d√πng */}
        <div className="form-group mb-3">
          <label>T√™n c·ªßa b·∫°n (t√πy ch·ªçn):</label>
          <Input
            name="userName"
            value={formData.userName}
            onChange={handleInputChange}
            placeholder="Nh·∫≠p t√™n ho·∫∑c ƒë·ªÉ tr·ªëng ƒë·ªÉ ·∫©n danh"
          />
        </div>

        <div className="form-group mb-3">
          <label>Email c·ªßa b·∫°n:</label>
          <Input
            name="userEmail"
            type="email"
            value={formData.userEmail}
            onChange={handleInputChange}
            placeholder="Nh·∫≠p email ƒë√£ d√πng ƒë·ªÉ ƒë·∫∑t ph√≤ng"
          />
        </div>

        {/* ƒê√°nh gi√° chi ti·∫øt */}
        <Divider orientation="left">ƒê√°nh gi√° chi ti·∫øt</Divider>
        <div className="grid sm:grid-cols-2 gap-3 mb-4">
          {Object.entries({
            cleanliness: "S·∫°ch s·∫Ω",
            comfort: "Tho·∫£i m√°i",
            staff: "Nh√¢n vi√™n",
            location: "ƒê·ªãa ƒëi·ªÉm",
            facilities: "Ti·ªán nghi",
            value: "ƒê√°ng gi√° ti·ªÅn",
          }).map(([key, label]) => (
            <div key={key} className="flex justify-between items-center">
              <span>{label}</span>
              <Rate
                value={formData.criteriaRatings[key]}
                onChange={(v) => handleCriteriaChange(key, v)}
              />
            </div>
          ))}
        </div>

        {/* T·ªïng th·ªÉ */}
        <Divider orientation="left">ƒê√°nh gi√° t·ªïng th·ªÉ</Divider>
        <Rate
          value={formData.rating}
          onChange={handleRatingChange}
          className="mb-3"
        />

        {/* B√¨nh lu·∫≠n */}
        <div className="form-group mb-4">
          <TextArea
            name="comment"
            value={formData.comment}
            onChange={handleInputChange}
            placeholder="Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n..."
            rows={4}
          />
        </div>

        {/* N√∫t */}
        <div className="form-actions flex gap-3">
          <Button type="primary" htmlType="submit" loading={formLoading}>
            G·ª≠i ƒë√°nh gi√°
          </Button>
          <Button onClick={onCancel}>H·ªßy</Button>
        </div>
      </form>
    </div>
  );
};

export default RatingForm;
