const mongoose = require('mongoose');
const Region = require('../models/region');
const User = require('../models/user');

// ‚úÖ T·∫°o region m·ªõi (h·ªó tr·ª£ upload ·∫£nh)
exports.createRegion = async (req, res) => {
  try {
    const { name, cities } = req.body;
    if (!name) return res.status(400).json({ message: "Thi·∫øu t√™n khu v·ª±c" });

    const regionExists = await Region.findOne({ name });
    if (regionExists)
      return res.status(400).json({ message: "Khu v·ª±c ƒë√£ t·ªìn t·∫°i" });

    // üëá X·ª≠ l√Ω ·∫£nh n·∫øu c√≥
    let imageUrl = null;
    if (req.file) {
      imageUrl = `${req.protocol}://${req.get("host")}/Uploads/${req.file.filename}`;
    }

    const region = new Region({
      name,
      cities: cities ? JSON.parse(cities) : [],
      imageUrl,
    });

    const saved = await region.save();
    res.status(201).json({ message: "T·∫°o khu v·ª±c th√†nh c√¥ng", region: saved });
  } catch (err) {
    console.error("L·ªói t·∫°o khu v·ª±c:", err);
    res.status(500).json({ message: "L·ªói t·∫°o khu v·ª±c", error: err.message });
  }
};

// ‚úÖ Th√™m th√†nh ph·ªë
exports.addCityToRegion = async (req, res) => {
  const { regionId } = req.params;
  const { name } = req.body;
  try {
    const region = await Region.findById(regionId);
    if (!region) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y khu v·ª±c" });

    if (region.cities.some((c) => c.name === name))
      return res.status(400).json({ message: "Th√†nh ph·ªë ƒë√£ t·ªìn t·∫°i" });

    region.cities.push({ name });
    await region.save();
    res.status(200).json({ message: "ƒê√£ th√™m th√†nh ph·ªë m·ªõi", region });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi th√™m th√†nh ph·ªë", error: err.message });
  }
};

// ‚úÖ L·∫•y danh s√°ch regions
exports.getRegions = async (req, res) => {
  try {
    const regions = await Region.find();
    res.status(200).json(regions);
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch khu v·ª±c:', error.message);
    res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch khu v·ª±c', error: error.message });
  }
};

// ‚úÖ Upload ·∫£nh cho region
exports.uploadRegionImage = async (req, res) => {
  const { id } = req.params;
  try {
    const region = await Region.findById(id);
    if (!region) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y khu v·ª±c" });
    if (!req.file) return res.status(400).json({ message: "Vui l√≤ng t·∫£i l√™n 1 ·∫£nh" });

    region.imageUrl = `${req.protocol}://${req.get("host")}/Uploads/${req.file.filename}`;
    await region.save();

    res.status(201).json({ message: "Upload ·∫£nh khu v·ª±c th√†nh c√¥ng", region });
  } catch (error) {
    console.error("L·ªói upload ·∫£nh region:", error);
    res.status(500).json({ message: "L·ªói khi upload ·∫£nh region", error: error.message });
  }
};

// ‚úÖ X√≥a ·∫£nh khu v·ª±c
exports.deleteRegionImage = async (req, res) => {
  const { id } = req.params;
  try {
    const region = await Region.findById(id);
    if (!region) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y khu v·ª±c" });

    region.imageUrl = null;
    await region.save();
    res.status(200).json({ message: "X√≥a ·∫£nh khu v·ª±c th√†nh c√¥ng", region });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi x√≥a ·∫£nh region", error: error.message });
  }
};

// ‚úÖ X√≥a region
exports.deleteRegion = async (req, res) => {
  const { id } = req.params;
  try {
    const region = await Region.findById(id);
    if (!region) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y khu v·ª±c" });

    await Region.deleteOne({ _id: id });
    res.status(200).json({ message: "X√≥a khu v·ª±c th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi x√≥a khu v·ª±c", error: error.message });
  }
};
