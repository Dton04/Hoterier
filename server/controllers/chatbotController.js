function normalizeVietnamese(str) {
  return str
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "") // lo·∫°i b·ªè d·∫•u
    .replace(/ƒë/g, "d")
    .replace(/ƒê/g, "D")
    .toLowerCase()
    .trim();
}



// server/controllers/chatbotController.js
const Hotel = require("../models/hotel");
const Region = require("../models/region");
const Room = require("../models/room");
const Booking = require("../models/booking");
const axios = require("axios");

/** üß© H√†m t√≠nh gi√° th·∫•p nh·∫•t */
function getLowestPrice(hotel) {
  if (!hotel?.rooms?.length) return null;
  const prices = hotel.rooms
    .map((r) => Number(r.rentperday || r.discountedPrice || 0))
    .filter((n) => Number.isFinite(n) && n > 0);
  return prices.length ? Math.min(...prices) : null;
}

/** üß© Nh·∫≠n di·ªán √Ω ƒë·ªãnh */
function detectIntent(msg) {
  const text = msg.toLowerCase();
  if (text.includes("ƒë·∫∑t") || text.includes("book")) return "booking";
  if (["c√≥", "ok", "x√°c nh·∫≠n", "ƒë·ªìng √Ω"].some((w) => text.includes(w)))
    return "confirm";
  return "search";
}

/** üß© Tr√≠ch th√¥ng tin c∆° b·∫£n */
async function extractInfo(msg) {
  const regions = await Region.find({}, "name").lean();
  const region = regions.find((r) =>
    msg.toLowerCase().includes(r.name.toLowerCase())
  );

  const peopleMatch = msg.match(/(\d+)\s*(?:ng∆∞·ªùi|kh√°ch)/i);
  const people = peopleMatch ? parseInt(peopleMatch[1]) : null;

  const dateMatch = msg.match(/(\d{1,2})[\/\-](\d{1,2})/g);
  const checkin = dateMatch?.[0] || null;
  const checkout = dateMatch?.[1] || null;

  return { region, people, checkin, checkout };
}

/** üí¨ B·ªô n√£o chatbot ch√≠nh */
exports.chatBotReply = async (req, res) => {
  try {
    const { message, context = {} } = req.body || {};
    if (!message)
      return res.status(400).json({ reply: "Thi·∫øu n·ªôi dung tin nh·∫Øn" });

    const intent = detectIntent(message);
    const prev = context || {};

    console.log("üì© MESSAGE:", message);
    console.log("üì¶ CONTEXT:", context);

    /** ==================== 2Ô∏è‚É£ KHI CH·ªåN PH√íNG ==================== */
    // Khi ng∆∞·ªùi d√πng ch·ªçn ph√≤ng, h·ªèi ph∆∞∆°ng th·ª©c thanh to√°n
    if (
      message.toLowerCase().includes("ch·ªçn") &&
      context?.hotelId &&
      context?.roomId &&
      !context.paymentMethod &&
      context.stage !== "choose_payment" && // ‚úÖ tr√°nh b·ªã l·∫∑p khi ƒëang thanh to√°n
      !message.toLowerCase().includes("ti·ªÅn m·∫∑t") &&
      !message.toLowerCase().includes("chuy·ªÉn kho·∫£n") &&
      !message.toLowerCase().includes("vnpay") &&
      !message.toLowerCase().includes("momo") // ‚úÖ lo·∫°i tr·ª´ tr∆∞·ªùng h·ª£p ch·ªçn ph∆∞∆°ng th·ª©c
    ) {
      const room = await Room.findById(context.roomId)
        .populate("hotelId", "name")
        .lean();

      if (!room) {
        return res.json({ reply: "Kh√¥ng t√¨m th·∫•y ph√≤ng b·∫°n ch·ªçn." });
      }

      return res.json({
        reply: `üõèÔ∏è B·∫°n ƒë√£ ch·ªçn ph√≤ng *${room.name}* t·∫°i kh√°ch s·∫°n *${room.hotelId.name}*.\nB·∫°n mu·ªën thanh to√°n b·∫±ng c√°ch n√†o ·∫°? üí≥`,
        suggest: [
          { id: "cash", name: "üíµ Ti·ªÅn m·∫∑t t·∫°i qu·∫ßy" },
          { id: "bank_transfer", name: "üè¶ Chuy·ªÉn kho·∫£n ng√¢n h√†ng" },
          { id: "vnpay", name: "üí≥ VNPay" },
          { id: "mobile_payment", name: "üì± MoMo" },
        ],
        context: { ...context, stage: "choose_payment" },
      });
    }



    /** ==================== 2Ô∏è‚É£ KHI CH·ªåN KH√ÅCH S·∫†N ==================== */
    if (
      message.toLowerCase().includes("ch·ªçn") &&
      (context.hotelId || prev.hotelId) &&
      !context.roomId
    ) {
      const hotelId = context.hotelId || prev.hotelId;

      let hotel = await Hotel.findById(hotelId).lean();
      if (!hotel) {
        return res.json({ reply: "Kh√¥ng t√¨m th·∫•y kh√°ch s·∫°n b·∫°n ch·ªçn." });
      }

      // ‚úÖ D√πng ƒë√∫ng API gi·ªëng HotelDetail
      const baseUrl = `${req.protocol}://${req.get("host")}`;
      const hotelWithRooms = await axios.get(
        `${baseUrl}/api/hotels/${hotelId}/rooms`
      );

      hotel = hotelWithRooms.data.hotel;
      const rooms = hotelWithRooms.data.rooms || [];

      if (!rooms.length) {
        return res.json({
          reply: `R·∫•t ti·∫øc, kh√°ch s·∫°n *${hotel.name}* hi·ªán kh√¥ng c√≤n ph√≤ng tr·ªëng. B·∫°n mu·ªën ch·ªçn kh√°ch s·∫°n kh√°c kh√¥ng?`,
        });
      }

      const topRooms = rooms.slice(0, 5).map((r) => ({
        id: r._id,
        name: r.name,
        price: r.rentperday || 0,
        amenities: r.amenities?.slice(0, 3) || [],
        image: r.imageurls?.[0] || "",
      }));

      const roomList = topRooms
        .map(
          (r, i) =>
            `${i + 1}. ${r.name} - ${r.price?.toLocaleString()}‚Ç´/ƒë√™m (${r.amenities.join(", ")})`
        )
        .join("\n");

      return res.json({
        reply: `üè® B·∫°n ƒë√£ ch·ªçn kh√°ch s·∫°n *${hotel.name}*.\nD∆∞·ªõi ƒë√¢y l√† c√°c ph√≤ng kh·∫£ d·ª•ng:\n${roomList}\n\nB·∫°n mu·ªën ch·ªçn ph√≤ng n√†o ƒë·ªÉ ƒë·∫∑t ·∫°?`,
        suggest: topRooms.map((r) => ({
          id: r.id,
          name: r.name,
          price: r.price,
          image: r.image,
        })),
        // ‚úÖ Gi·ªØ l·∫°i c·∫£ hotelId ƒë·ªÉ FE d√πng ti·∫øp
        context: { ...context, hotelId, hotelName: hotel.name },
      });
    }

    /** ==================== 4Ô∏è‚É£ KHI CH·ªåN PH∆Ø∆†NG TH·ª®C THANH TO√ÅN ==================== */
    if (
      context.stage === "choose_payment" &&
      (
        message.toLowerCase().includes("ch·ªçn") ||
        message.toLowerCase().includes("thanh to√°n") ||
        message.toLowerCase().includes("ti·ªÅn m·∫∑t") ||
        message.toLowerCase().includes("momo") ||
        message.toLowerCase().includes("vnpay") ||
        message.toLowerCase().includes("chuy·ªÉn kho·∫£n")
      )
    ) {
      console.log("üí≥ Ng∆∞·ªùi d√πng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n:", message);

      const methodMap = {
        cash: "Ti·ªÅn m·∫∑t t·∫°i qu·∫ßy",
        bank_transfer: "Chuy·ªÉn kho·∫£n ng√¢n h√†ng",
        vnpay: "VNPay",
        mobile_payment: "MoMo",
      };
      let chosenMethod = null;
      const text = normalizeVietnamese(message);

      if (text.includes("tien mat")) chosenMethod = "cash";
      else if (text.includes("chuyen khoan")) chosenMethod = "bank_transfer";
      else if (text.includes("vnpay")) chosenMethod = "vnpay";
      else if (text.includes("momo")) chosenMethod = "mobile_payment";
      else if (text.includes("thanh toan")) chosenMethod = "cash"; // fallback




      if (!chosenMethod) {
        return res.json({
          reply:
            "Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n h·ª£p l·ªá (Ti·ªÅn m·∫∑t, VNPay, MoMo, ho·∫∑c Chuy·ªÉn kho·∫£n).",
        });
      }

      const room = await Room.findById(context.roomId)
        .populate("hotelId", "name")
        .lean();
      if (!room) {
        return res.json({ reply: "Kh√¥ng t√¨m th·∫•y ph√≤ng b·∫°n ch·ªçn." });
      }


      // üß† Chu·∫©n h√≥a ng√†y nh·∫≠n v√† tr·∫£ ph√≤ng (fix l·ªói Invalid time value)
      function parseDate(input) {
        if (!input) return null;

        // n·∫øu d·∫°ng "25/10" ho·∫∑c "25-10" th√¨ th√™m nƒÉm hi·ªán t·∫°i
        const parts = input.split(/[\/\-]/).map((p) => p.trim());
        if (parts.length === 2) {
          const [d, m] = parts;
          const y = new Date().getFullYear();
          return new Date(`${y}-${m}-${d}`);
        }

        // n·∫øu c√≥ ƒë·ªß 3 ph·∫ßn ng√†y/th√°ng/nƒÉm
        if (parts.length === 3) {
          const [d, m, y] = parts;
          return new Date(`${y}-${m}-${d}`);
        }

        // fallback: parse b√¨nh th∆∞·ªùng
        return new Date(input);
      }

      // üß† T·∫°o booking th·∫≠t
      const checkinDate = parseDate(context.checkin);
      const checkoutDate = parseDate(context.checkout);

      const bookingPayload = {
        roomid: room._id,
        checkin: checkinDate ? checkinDate.toISOString() : new Date().toISOString(),
        checkout: checkoutDate
          ? checkoutDate.toISOString()
          : new Date(Date.now() + 86400000).toISOString(),
        adults: context.people || 2,
        children: 0,
        name: "Kh√°ch h√†ng chatbot",
        email: "guest@chatbot.ai",
        phone: "0000000000",
        paymentMethod: chosenMethod,
        roomsBooked: 1,
        totalAmount: room.rentperday,
      };


      let newBooking;
      try {
        const baseUrl = `${req.protocol}://${req.get("host")}`;
        const bookingRes = await axios.post(`${baseUrl}/api/bookings/bookroom`, bookingPayload);
        newBooking = bookingRes.data?.booking || bookingRes.data;

        if (!newBooking?._id) {
          console.error("‚ö†Ô∏è L·ªói: API bookroom kh√¥ng tr·∫£ booking h·ª£p l·ªá", bookingRes.data);
          return res.json({
            reply: "C√≥ l·ªói khi t·∫°o ƒë∆°n ƒë·∫∑t ph√≤ng, vui l√≤ng th·ª≠ l·∫°i sau.",
          });
        }
      } catch (err) {
        console.error("‚ùå L·ªói khi t·∫°o booking:", err.message);
        return res.json({
          reply: "Xin l·ªói, h·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë khi t·∫°o ƒë∆°n. Vui l√≤ng th·ª≠ l·∫°i sau.",
        });
      }


      // ‚úÖ X·ª≠ l√Ω redirect cho c√°c c·ªïng thanh to√°n
      if (chosenMethod === "vnpay") {
        const vnpayRes = await axios.post(`${baseUrl}/api/vnpay/create-payment`, {
          amount: newBooking.totalAmount,
          orderId: `VNP${Date.now()}`,
          orderInfo: `Thanh to√°n ph√≤ng ${room.name}`,
          bookingId: newBooking._id,
        });

        return res.json({
          reply: `üí≥ ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn c·ªïng thanh to√°n VNPay...`,
          redirect: vnpayRes.data.payUrl,
        });
      }

      if (chosenMethod === "mobile_payment") {
        try {
          const momoRes = await axios.post(`${baseUrl}/api/momo/create-payment`, {
            amount: newBooking.totalAmount,
            orderId: `MOMO${Date.now()}`,
            orderInfo: `Thanh to√°n ph√≤ng ${room.name}`,
            bookingId: newBooking._id,
          });

          if (!momoRes.data?.payUrl) {
            console.error("‚ö†Ô∏è MoMo kh√¥ng tr·∫£ v·ªÅ payUrl:", momoRes.data);
            return res.json({
              reply: "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi MoMo. Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c kh√°c.",
            });
          }

          return res.json({
            reply: `üì± ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn c·ªïng thanh to√°n MoMo...`,
            redirect: momoRes.data.payUrl,
          });
        } catch (err) {
          console.error("‚ùå L·ªói MoMo:", err.message);
          return res.json({
            reply: "H·ªá th·ªëng MoMo hi·ªán kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c kh√°c.",
          });
        }
      }


      if (chosenMethod === "bank_transfer") {
        return res.json({
          reply: `üè¶ ƒê·∫∑t ph√≤ng th√†nh c√¥ng!\nVui l√≤ng chuy·ªÉn kho·∫£n theo h∆∞·ªõng d·∫´n tr√™n trang chi ti·∫øt ƒë∆°n h√†ng.`,
          redirect: `/bookingscreen/${room._id}?bookingId=${newBooking._id}`,
        });
      }

      // M·∫∑c ƒë·ªãnh ti·ªÅn m·∫∑t
      return res.json({
        reply: `‚úÖ ƒê·∫∑t ph√≤ng th√†nh c√¥ng!\nPh√≤ng *${room.name}* t·∫°i *${room.hotelId.name}* ƒë√£ ƒë∆∞·ª£c gi·ªØ ch·ªó.\nPh∆∞∆°ng th·ª©c thanh to√°n: *${methodMap[chosenMethod]}*.\nB·∫°n c√≥ th·ªÉ thanh to√°n t·∫°i qu·∫ßy khi nh·∫≠n ph√≤ng.`,
        redirect: `/`,
        context: { ...context, stage: null }, // ‚úÖ reset ƒë·ªÉ tr√°nh l·∫∑p
      });

    }


    /** ==================== 1Ô∏è‚É£ FLOW T√åM / ƒê·∫∂T KH√ÅCH S·∫†N ==================== */
    if (intent === "booking" || intent === "search") {
      const { region, people, checkin, checkout } = await extractInfo(message);

      if (!region && !prev.region)
        return res.json({
          reply:
            "B·∫°n mu·ªën t√¨m kh√°ch s·∫°n ·ªü khu v·ª±c n√†o ·∫°? (VD: ƒê√† L·∫°t, H√† N·ªôi, Nha Trang...)",
          expect: "region",
          context: prev,
        });

      if (!people && !prev.people)
        return res.json({
          reply: `B·∫°n ƒëi m·∫•y ng∆∞·ªùi${region ? ` ƒë·∫øn ${region.name}` : ""
            } v·∫≠y ·∫°?`,
          expect: "people",
          context: { ...prev, region: region?.name || prev.region },
        });

      if ((!checkin || !checkout) && (!prev.checkin || !prev.checkout))
        return res.json({
          reply:
            "B·∫°n mu·ªën nh·∫≠n v√† tr·∫£ ph√≤ng ng√†y n√†o? (VD: 1/10 - 3/10)",
          expect: "date",
          context: {
            ...prev,
            region: region?.name || prev.region,
            people: people || prev.people,
          },
        });

      const regionObj =
        region || (await Region.findOne({ name: prev.region }).lean());
      if (!regionObj)
        return res.json({
          reply: `M√¨nh kh√¥ng t√¨m th·∫•y khu v·ª±c ${prev.region} r·ªìi üò¢`,
        });

      const hotels = await Hotel.find({ region: regionObj._id })
        .populate("region", "name")
        .populate("rooms")
        .lean();

      if (!hotels.length)
        return res.json({
          reply: `Hi·ªán ch∆∞a c√≥ kh√°ch s·∫°n n√†o ·ªü ${regionObj.name}.`,
        });

      const list = hotels
        .slice(0, 5)
        .map(
          (h, i) =>
            `${i + 1}. ${h.name} (${h.starRating || 3}‚≠ê) - gi√° t·ª´ ${getLowestPrice(h)?.toLocaleString() || "N/A"
            }‚Ç´`
        )
        .join("\n");

      return res.json({
        reply: `D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë kh√°ch s·∫°n ·ªü ${regionObj.name} ph√π h·ª£p cho ${people || prev.people
          } ng∆∞·ªùi:\n${list}\n\nB·∫°n mu·ªën xem kh√°ch s·∫°n n√†o ·∫°?`,
        suggest: hotels.map((h) => ({ id: h._id, name: h.name })),
        context: {
          region: regionObj.name,
          people: people || prev.people,
          checkin: checkin || prev.checkin,
          checkout: checkout || prev.checkout,
        },
      });
    }





    /** ==================== 4Ô∏è‚É£ M·∫∂C ƒê·ªäNH ==================== */
    return res.json({
      reply:
        "Xin ch√†o üëã! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m v√† ƒë·∫∑t kh√°ch s·∫°n. B·∫°n mu·ªën ƒëi ƒë√¢u ·∫°?",
    });
  } catch (err) {
    console.error("‚ùå Chatbot error:", err.message);
    res.status(500).json({
      reply: "Xin l·ªói, t√¥i ƒëang b·∫≠n. Vui l√≤ng th·ª≠ l·∫°i sau.",
      error: err.message,
    });
  }
};
